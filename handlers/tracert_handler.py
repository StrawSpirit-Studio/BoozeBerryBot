from scapy.layers.inet import IP, ICMP
from scapy.sendrecv import sr1
import asyncio

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è traceroute
async def tracert_handler(client, message):
    if message.text and "$tracert" in message.text:
        command = message.text.split()

        # –Ø–∫—â–æ –Ω–µ–º–∞ –∞–¥—Ä–µ—Å–∏
        if len(command) < 2:
            await message.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `$tracert <–∞–¥—Ä–µ—Å–∞>`\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `$tracert google.com`")
            return

        target = command[1]
        max_hops = 30
        timeout = 2
        traceroute_results = []

        await message.reply(f"üîç –í–∏–∫–æ–Ω—É—é tracer –¥–æ {target}...")

        try:
            for ttl in range(1, max_hops + 1):
                pkt = IP(dst=target, ttl=ttl) / ICMP()
                reply = sr1(pkt, verbose=0, timeout=timeout)

                if reply is None:
                    traceroute_results.append(f"{ttl}: * Timeout")
                else:
                    traceroute_results.append(f"{ttl}: {reply.src}")
                    if reply.type == 0:  # –ï—Ö–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å (–º–µ—Ç–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞)
                        break

                await asyncio.sleep(0.1)  # –î–æ–¥–∞—î–º–æ –ø–∞—É–∑—É –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

            result_message = f"üîó **Tracert –¥–æ {target}:**\n\n" + "\n".join(traceroute_results)
            await message.reply(result_message)

        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")